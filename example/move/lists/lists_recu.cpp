#include "lists_recu.hpp"

std::optional<std::uint64_t> bs(std::uint64_t arg1, std::deque<std::uint64_t> arg2) {
    // bs x [] = None
    if (arg2.empty()) {
        return std::optional<std::uint64_t>();
    }

    // bs x [y] = If (x = y) (Some 0) None
    if (arg2.size() == 1) {
        auto y = std::move(arg2[0]);
        std::optional<std::uint64_t> temp0;
        if (std::move(arg1) == std::move(y)) {
            temp0 = std::make_optional<std::uint64_t>(0);
        } else {
            temp0 = std::optional<std::uint64_t>();
        }
        return temp0;
    }

    // bs x ys = (let m = (length ys) div 2 in ...
    auto temp0 = arg2.size() / 2;
    auto m = std::move(temp0);
    auto temp2 = arg2;
    auto temp1 = temp2[m];
    auto y = std::move(temp1);
    std::optional<std::uint64_t> temp3;
    if (y == arg1) {
        temp3 = std::make_optional<std::uint64_t>(std::move(m));
    } else {
        std::optional<std::uint64_t> temp4;
        if (std::move(y) < arg1) {
            auto temp5 = ([&] {
                auto temp6 = m + 1;
                auto temp7 = std::move(arg2);
                temp7.erase(temp7.begin(), std::next(temp7.begin(), temp6));
                auto temp8 = bs(std::move(arg1), std::move(temp7));

                // Some n \<Rightarrow> Some (m + n + 1)
                if (temp8.has_value()) {
                    auto n = std::move(temp8.value());
                    return std::make_optional<std::uint64_t>((std::move(m) + std::move(n)) + 1);
                }

                // None \<Rightarrow> None
                return std::optional<std::uint64_t>();
            })();
            temp4 = temp5;
        } else {
            auto temp9 = std::move(m);
            auto temp10 = std::move(arg2);
            temp10.erase(std::next(temp10.begin(), temp9), temp10.end());
            temp4 = bs(std::move(arg1), std::move(temp10));
        }
        temp3 = std::move(temp4);
    }
    return temp3;
}

std::uint64_t fib(const std::uint64_t &arg1) {
    auto impl = [&]() -> std::uint64_t {
        // fib 0 = 1
        if (arg1 == 0) {
            return 1;
        }

        // fib (Suc 0) = 1
        if (arg1 != 0) {
            if (arg1 - 1 == 0) {
                return 1;
            }
        }

        // fib n = (fib (n - 1)) + (fib (n - 2))
        return fib(arg1 - 1) + fib(std::move(arg1) - 2);
    };

    static std::map<std::tuple<std::uint64_t>, std::uint64_t> cache;
    auto args = std::make_tuple(arg1);
    auto it = cache.find(args);
    return it != cache.end() ? it->second : (cache.emplace(std::move(args), impl()).first->second);
}

// generated by HOL2Cpp
