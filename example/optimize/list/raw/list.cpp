#include "list.hpp"

std::optional<std::uint64_t> bs(std::uint64_t arg1, std::list<std::uint64_t> arg2) {
    // bs x [] = None
    if (arg2.empty()) {
        return std::optional<std::uint64_t>();
    }

    // bs x [y] = If (x = y) (Some 0) None
    if (arg2.size() == 1) {
        auto x = arg1;
        auto y = *std::next(arg2.begin(), 0);
        std::optional<std::uint64_t> temp0;
        if (x == y) {
            temp0 = std::make_optional<std::uint64_t>(0);
        } else {
            temp0 = std::optional<std::uint64_t>();
        }
        return temp0;
    }

    // bs x ys = (let m = (length ys) div 2 in ...
    auto x = arg1;
    auto ys = arg2;
    auto temp0 = ys.size() / 2;
    auto m = temp0;
    auto temp2 = ys;
    auto temp1 = *std::next(temp2.begin(), m);
    auto y = temp1;
    std::optional<std::uint64_t> temp3;
    if (y == x) {
        temp3 = std::make_optional<std::uint64_t>(m);
    } else {
        std::optional<std::uint64_t> temp4;
        if (y < x) {
            auto temp5 = ([&] {
                auto temp6 = bs(x, std::list<std::uint64_t>(std::next(ys.begin(), m + 1), ys.end()));

                // Some n \<Rightarrow> Some (m + n + 1)
                if (temp6.has_value()) {
                    auto n = temp6.value();
                    return std::make_optional<std::uint64_t>((m + n) + 1);
                }

                // None \<Rightarrow> None
                return std::optional<std::uint64_t>();
            })();
            temp4 = temp5;
        } else {
            temp4 = bs(x, std::list<std::uint64_t>(ys.begin(), std::next(ys.begin(), m)));
        }
        temp3 = temp4;
    }
    return temp3;
}

std::list<std::uint64_t> supto(std::uint64_t arg1, std::uint64_t arg2) {
    // supto i j = (if i \<ge> j then [] else i # supto (i + 1) j)
    auto i = arg1;
    auto j = arg2;
    std::list<std::uint64_t> temp0;
    if (i >= j) {
        temp0 = std::list<std::uint64_t>();
    } else {
        auto temp1 = supto(i + 1, j);
        temp1.push_front(i);
        temp0 = temp1;
    }
    return temp0;
}

// generated by HOL2Cpp
