#include <cstdint>
#include <cstdlib>
#include <memory>
#include <variant>

class snat {
    struct _sZero {
        bool operator<(const _sZero &) const { return false; }
    };
    struct _sSucc {
        std::shared_ptr<snat> p1_;

        snat p1() const { return *p1_; }

        bool operator<(const _sSucc &rhs) const {
            return std::tie(*p1_) < std::tie(*rhs.p1_);
        }
    };

    std::variant<_sZero, _sSucc> value_;
    snat(const std::variant<_sZero, _sSucc> &value) : value_(value) {}

  public:
    snat() = default;

    static snat sZero() {
        return snat { _sZero {  } };
    }
    static snat sSucc(const snat &p1) {
        return snat { _sSucc { std::make_shared<snat>(p1) } };
    }

    bool is_sZero() const { return std::holds_alternative<_sZero>(value_); }
    bool is_sSucc() const { return std::holds_alternative<_sSucc>(value_); }

    const _sSucc &as_sSucc() const { return std::get<_sSucc>(value_); }

    bool operator<(const snat &rhs) const { return value_ < rhs.value_; }
};

template<typename T1>
class alsit {
    struct _aNil {
        bool operator<(const _aNil &) const { return false; }
    };
    struct _aCons {
        T1 p1_;
        alist<T1> p2_;

        const T1 &p1() const { return p1_; }
        const alist<T1> &p2() const { return p2_; }

        bool operator<(const _aCons &rhs) const {
            return std::tie(p1_, p2_) < std::tie(rhs.p1_, rhs.p2_);
        }
    };

    std::variant<_aNil, _aCons> value_;
    alsit(const std::variant<_aNil, _aCons> &value) : value_(value) {}

  public:
    alsit() = default;

    static alsit<T1> aNil() {
        return alsit<T1> { _aNil {  } };
    }
    static alsit<T1> aCons(const T1 &p1, const alist<T1> &p2) {
        return alsit<T1> { _aCons { p1, p2 } };
    }

    bool is_aNil() const { return std::holds_alternative<_aNil>(value_); }
    bool is_aCons() const { return std::holds_alternative<_aCons>(value_); }

    const _aCons &as_aCons() const { return std::get<_aCons>(value_); }

    bool operator<(const alsit<T1> &rhs) const { return value_ < rhs.value_; }
};

template<typename T1>
using slist = alsit;


template<typename T1>
alsit<T1> app(const alsit<T1> &arg1, const alsit<T1> &arg2) {
    // app sNil ys = ys
    if (arg1.is_aNil()) {
        return arg2;
    }

    // app (sCons x xs) ys = sCons x (app xs ys)
    auto x = arg1.as_aCons().p1();
    auto xs = arg1.as_aCons().p2();
    auto temp0 = alsit<T1>::aCons(
        x, app(xs, arg2)
    );
    return temp0;
}

template<typename T1>
snat len(const alsit<T1> &arg1) {
    // len sNil = sZero
    if (arg1.is_aNil()) {
        return snat::sZero();
    }

    // len (sCons x xs) = sSucc (len xs)
    auto xs = arg1.as_aCons().p2();
    auto temp0 = snat::sSucc(
        len(xs)
    );
    return temp0;
}

template<typename T1>
alsit<T1> rev(const alsit<T1> &arg1) {
    // rev sNil = sNil
    if (arg1.is_aNil()) {
        return alsit<T1>::aNil();
    }

    // rev (sCons x xs) = app (rev xs) (sCons x sNil)
    auto x = arg1.as_aCons().p1();
    auto xs = arg1.as_aCons().p2();
    auto temp0 = alsit<T1>::aCons(
        x, alsit<T1>::aNil()
    );
    return app(rev(xs), temp0);
}



// generated by HOL2Cpp
