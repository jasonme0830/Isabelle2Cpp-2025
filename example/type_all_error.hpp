#include <cstdlib>
#include <variant>

class ybool {
    struct _yTrue {
        _yTrue() {}
        _yTrue(_yTrue&& other) noexcept{ }
        bool operator<(const _yTrue &) const { return false; }
        _yTrue& operator=(_yTrue&& other) noexcept { return *this; }
    };
    struct _yFalse {
        _yFalse() {}
        _yFalse(_yFalse&& other) noexcept{ }
        bool operator<(const _yFalse &) const { return false; }
        _yFalse& operator=(_yFalse&& other) noexcept { return *this; }
    };
    struct _yMid {
        _yMid() {}
        _yMid(_yMid&& other) noexcept{ }
        bool operator<(const _yMid &) const { return false; }
        _yMid& operator=(_yMid&& other) noexcept { return *this; }
    };

    std::variant<_yTrue, _yFalse, _yMid> value_;
    ybool(const std::variant<_yTrue, _yFalse, _yMid> &value) : value_(value) {}

  public:
    ybool() = default;

    static ybool yTrue() {
        return ybool { _yTrue {  } };
    }
    static ybool yFalse() {
        return ybool { _yFalse {  } };
    }
    static ybool yMid() {
        return ybool { _yMid {  } };
    }

    bool is_yTrue() const { return std::holds_alternative<_yTrue>(value_); }
    bool is_yFalse() const { return std::holds_alternative<_yFalse>(value_); }
    bool is_yMid() const { return std::holds_alternative<_yMid>(value_); }

    bool operator<(const ybool &rhs) const { return value_ < rhs.value_; }
};

using obool = ybool;


// generated by HOL2Cpp
