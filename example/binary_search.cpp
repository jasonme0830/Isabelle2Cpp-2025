#include "binary_search.hpp"

std::optional<std::uint64_t> bs(const std::uint64_t &arg1, std::list<std::uint64_t> arg2) {
    // bs x [] = None
    if (arg2.empty()) {
        return std::optional<std::uint64_t>();
    }

    // bs x [y] = If (x = y) (Some x) None
    if (arg2.size() == 1) {
        auto y = *std::next(arg2.begin(), 0);
        std::optional<std::uint64_t> temp0;
        if (arg1 == y) {
            temp0 = std::make_optional<std::uint64_t>(arg1);
        } else {
            temp0 = std::optional<std::uint64_t>();
        }
        return temp0;
    }

    // bs x ys = (let m = (length ys) div 2 in let y = ys ! m in If (y = x) (Some x) (If (y < x) (bs x (drop (m + 1) ys)) (bs x (take m ys))))
    auto temp0 = arg2.size() / 2;
    auto m = temp0;
    auto temp2 = arg2;
    auto temp1 = *std::next(temp2.begin(), m);
    auto y = temp1;
    std::optional<std::uint64_t> temp3;
    if (y == arg1) {
        temp3 = std::make_optional<std::uint64_t>(arg1);
    } else {
        std::optional<std::uint64_t> temp4;
        if (y < arg1) {
            temp4 = bs(arg1, decltype(arg2){ std::next(arg2.begin(), m + 1), arg2.end() });
        } else {
            temp4 = bs(arg1, decltype(arg2){ arg2.begin(), std::next(arg2.begin(), m) });
        }
        temp3 = temp4;
    }
    return temp3;
}

// generated by HOL2Cpp
