datatype nat = Zero | Suc nat
datatype 'a option = None | Some 'a
datatype 'a list = Nil | Cons 'a "'a list"
datatype ('a, 'b) pair = Pair 'a 'b

fun length :: "'a list => nat"
fun take :: "nat => 'a list => 'a list"
fun drop :: "nat => 'a list => 'a list"
fun append :: "'a list => 'a list => 'a list"
fun upto :: "int => int => int list"
fun upt :: "nat => nat => nat list"
fun nth :: "'a list => nat => 'a"

fun concat :: "'a list list \<Rightarrow> 'a list"
fun map :: "('d \<Rightarrow> 'e) \<Rightarrow> 'd list \<Rightarrow> 'e list"

fun If :: "bool => 'a => 'a => 'a"
