#include "merge_sort.disable.hpp"

std::list<std::uint64_t> merge1(const std::list<std::uint64_t> &arg1, const std::list<std::uint64_t> &arg2) {
    // merge1 xs [] = xs
    if (arg2.empty()) {
        return arg1;
    }

    // merge1 [] ys = ys
    if (arg1.empty()) {
        return arg2;
    }

    // merge1 (x # xs) (y # ys) = If (x \<le> y) (x # (merge1 xs (y # ys))) (y # (merge1 (x # xs) ys))
    if (!arg1.empty()) {
        if (!arg2.empty()) {
            auto x = arg1.front();
            auto xs = decltype(arg1){std::next(arg1.begin()), arg1.end()};
            auto y = arg2.front();
            auto ys = decltype(arg2){std::next(arg2.begin()), arg2.end()};
            std::list<std::uint64_t> temp0;
            if (x <= y) {
                auto temp1 = ys;
                temp1.push_front(y);
                auto temp2 = merge1(xs, temp1);
                temp2.push_front(x);
                temp0 = temp2;
            } else {
                auto temp3 = xs;
                temp3.push_front(x);
                auto temp4 = merge1(temp3, ys);
                temp4.push_front(y);
                temp0 = temp4;
            }
            return temp0;
        }
    } else { // auto-generated for -Wreturn-type
        std::abort();
    }
}

std::list<std::uint64_t> merge_sort1(const std::list<std::uint64_t> &arg1) {
    // merge_sort1 [] = []
    if (arg1.empty()) {
        return std::list<std::uint64_t>();
    }

    // merge_sort1 [x] = [x]
    if (arg1.size() == 1) {
        auto x = *std::next(arg1.begin(), 0);
        return std::list<std::uint64_t>{x};
    }

    // merge_sort1 xs = merge1 (merge_sort1 (take ((length xs) div 2) xs)) (merge_sort1 (drop ((length xs) div 2) xs))
    return merge1(merge_sort1(decltype(arg1){ arg1.begin(), std::next(arg1.begin(), arg1.size() / 2) }), merge_sort1(decltype(arg1){ std::next(arg1.begin(), arg1.size() / 2), arg1.end() }));
}

// generated by HOL2Cpp
