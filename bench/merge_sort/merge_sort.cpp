#include "merge_sort.hpp"

std::list<std::uint64_t> merge(const std::list<std::uint64_t> &arg1, const std::list<std::uint64_t> &arg2) {
    // merge xs [] = xs
    if (arg2.empty()) {
        return arg1;
    }

    // merge [] ys = ys
    if (arg1.empty()) {
        return arg2;
    }

    // merge (x # xs) (y # ys) = If (x \<le> y) (x # (merge xs (y # ys))) (y # (merge (x # xs) ys))
    if (!arg1.empty()) {
        if (!arg2.empty()) {
            auto x = arg1.front();
            auto xs = std::list<std::uint64_t>(std::next(arg1.begin()), arg1.end());
            auto y = arg2.front();
            auto ys = std::list<std::uint64_t>(std::next(arg2.begin()), arg2.end());
            std::list<std::uint64_t> temp0;
            if (x <= y) {
                auto temp1 = ys;
                temp1.push_front(y);
                auto temp2 = merge(xs, temp1);
                temp2.push_front(x);
                temp0 = temp2;
            } else {
                auto temp3 = xs;
                temp3.push_front(x);
                auto temp4 = merge(temp3, ys);
                temp4.push_front(y);
                temp0 = temp4;
            }
            return temp0;
        }
    } else { // auto-generated for -Wreturn-type
        std::abort();
    }
}

std::list<std::uint64_t> merge_sort(const std::list<std::uint64_t> &arg1) {
    // merge_sort [] = []
    if (arg1.empty()) {
        return std::list<std::uint64_t>();
    }

    // merge_sort [x] = [x]
    if (arg1.size() == 1) {
        auto x = *std::next(arg1.begin(), 0);
        return std::list<std::uint64_t>{x};
    }

    // merge_sort xs = merge (merge_sort (take ((length xs) div 2) xs)) (merge_sort (drop ((length xs) div 2) xs))
    return merge(merge_sort(std::list<std::uint64_t>(arg1.begin(), std::next(arg1.begin(), arg1.size() / 2))), merge_sort(std::list<std::uint64_t>(std::next(arg1.begin(), arg1.size() / 2), arg1.end())));
}

// generated by HOL2Cpp
