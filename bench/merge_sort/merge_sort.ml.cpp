#include "merge_sort.ml.hpp"

std::list<std::uint64_t> merge_ml(std::list<std::uint64_t> arg1, std::list<std::uint64_t> arg2) {
    // merge_ml xs [] = xs
    if (arg2.empty()) {
        return arg1;
    }

    // merge_ml [] ys = ys
    if (arg1.empty()) {
        return arg2;
    }

    // merge_ml (x # xs) (y # ys) = If (x \<le> y) (x # (merge_ml xs (y # ys))) (y # (merge_ml (x # xs) ys))
    if (arg1.size() >= 1) {
        if (arg2.size() >= 1) {
            auto x = arg1.front();
            arg1.erase(arg1.begin(), std::next(arg1.begin(), 1));
            auto xs = std::move(arg1);
            auto y = arg2.front();
            arg2.erase(arg2.begin(), std::next(arg2.begin(), 1));
            auto ys = std::move(arg2);
            std::list<std::uint64_t> temp0;
            if (x <= y) {
                auto temp1 = std::move(xs);
                auto temp3 = std::move(ys);
                temp3.push_front(y);
                auto temp2 = std::move(temp3);
                auto temp4 = merge_ml(std::move(temp1), std::move(temp2));
                temp4.push_front(x);
                temp0 = std::move(temp4);
            } else {
                auto temp6 = std::move(xs);
                temp6.push_front(x);
                auto temp5 = std::move(temp6);
                auto temp7 = std::move(ys);
                auto temp8 = merge_ml(std::move(temp5), std::move(temp7));
                temp8.push_front(y);
                temp0 = std::move(temp8);
            }
            return temp0;
        }
    } else { // auto-generated for -Wreturn-type
        std::abort();
    }
}

std::list<std::uint64_t> merge_sort_ml(std::list<std::uint64_t> arg1) {
    // merge_sort_ml [] = []
    if (arg1.empty()) {
        return std::list<std::uint64_t>();
    }

    // merge_sort_ml [x] = [x]
    if (arg1.size() == 1) {
        auto x = *std::next(arg1.begin(), 0);
        return std::list<std::uint64_t>{x};
    }

    // merge_sort_ml xs = merge_ml (merge_sort_ml (take ((length xs) div 2) xs)) (merge_sort_ml (drop ((length xs) div 2) xs))
    auto temp1 = std::list<std::uint64_t>(arg1.begin(), std::next(arg1.begin(), arg1.size() / 2));
    auto temp0 = merge_sort_ml(std::move(temp1));
    auto temp4 = arg1.size() / 2;
    auto temp5 = std::move(arg1);
    temp5.erase(temp5.begin(), std::next(temp5.begin(), temp4));
    auto temp3 = std::move(temp5);
    auto temp2 = merge_sort_ml(std::move(temp3));
    return merge_ml(std::move(temp0), std::move(temp2));
}

// generated by HOL2Cpp
