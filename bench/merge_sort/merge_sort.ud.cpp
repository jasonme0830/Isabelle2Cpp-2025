#include "merge_sort.ud.hpp"

std::deque<std::uint64_t> merge_ud(const std::deque<std::uint64_t> &arg1, const std::deque<std::uint64_t> &arg2) {
    // merge_ud xs [] = xs
    if (arg2.empty()) {
        return arg1;
    }

    // merge_ud [] ys = ys
    if (arg1.empty()) {
        return arg2;
    }

    // merge_ud (x # xs) (y # ys) = If (x \<le> y) (x # (merge_ud xs (y # ys))) (y # (merge_ud (x # xs) ys))
    if (!arg1.empty()) {
        if (!arg2.empty()) {
            auto x = arg1.front();
            auto xs = std::deque<std::uint64_t>(arg1.begin() + 1, arg1.end());
            auto y = arg2.front();
            auto ys = std::deque<std::uint64_t>(arg2.begin() + 1, arg2.end());
            std::deque<std::uint64_t> temp0;
            if (x <= y) {
                auto temp1 = ys;
                temp1.push_front(y);
                auto temp2 = merge_ud(xs, temp1);
                temp2.push_front(x);
                temp0 = temp2;
            } else {
                auto temp3 = xs;
                temp3.push_front(x);
                auto temp4 = merge_ud(temp3, ys);
                temp4.push_front(y);
                temp0 = temp4;
            }
            return temp0;
        }
    } else { // auto-generated for -Wreturn-type
        std::abort();
    }
}

std::deque<std::uint64_t> merge_sort_ud(const std::deque<std::uint64_t> &arg1) {
    // merge_sort_ud [] = []
    if (arg1.empty()) {
        return std::deque<std::uint64_t>();
    }

    // merge_sort_ud [x] = [x]
    if (arg1.size() == 1) {
        auto x = arg1[0];
        return std::deque<std::uint64_t>{x};
    }

    // merge_sort_ud xs = merge_ud (merge_sort_ud (take ((length xs) div 2) xs)) (merge_sort_ud (drop ((length xs) div 2) xs))
    return merge_ud(merge_sort_ud(std::deque<std::uint64_t>(arg1.begin(), arg1.begin() + arg1.size() / 2)), merge_sort_ud(std::deque<std::uint64_t>(arg1.begin() + arg1.size() / 2, arg1.end())));
}

// generated by HOL2Cpp
